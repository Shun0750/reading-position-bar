(()=>{"use strict";var e={814:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},122:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),u=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(u).concat([l]).join("\n")}return[a].join("\n")}},263:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(122),o=n.n(r),a=n(814),i=n.n(a)()(o());i.push([e.id,":root {\n  barRight: 0;\n  bgColor: rebeccapurple;\n  barWidth: 8px;\n  zIndex: 1000;\n}\n\n.reading-position-bar__wrapper {\n  display: none;\n  position: fixed;\n  right: var(--barRight);\n  top: 0;\n  width: var(--barWidth);\n  height: 100%;\n  background: #DDD;\n  z-index: 1000;\n}\n\n.reading-position-bar__wrapper__indicator {\n  background: var(--bgColor);\n  height: 0;\n  border-bottom-left-radius: 8px;\n  border-bottom-right-radius: 8px;\n}\n\n.reading-position-bar__wrapper__text {\n  position: absolute;\n  right: 0px;\n  margin-top: -20px;\n  padding: 5px;\n  width: 40px;\n  background: var(--bgColor);\n  color: white;\n  text-align: right;\n  font-size: 12px;\n}\n","",{version:3,sources:["webpack://src/scss/style.scss"],names:[],mappings:"AAAA;EACE,WAAW;EACX,sBAAsB;EACtB,aAAa;EACb,YAAY;AACd;;AAGE;EACE,aAAa;EACb,eAAe;EACf,sBAAsB;EACtB,MAAM;EACN,sBAAsB;EACtB,YAAY;EACZ,gBAAgB;EAChB,aAAa;AAAjB;;AAEI;EACE,0BAA0B;EAC1B,SAAS;EACT,8BAA8B;EAC9B,+BAA+B;AACrC;;AAEI;EACE,kBAAkB;EAClB,UAAU;EACV,iBAAiB;EACjB,YAAY;EACZ,WAAW;EACX,0BAA0B;EAC1B,YAAY;EACZ,iBAAiB;EACjB,eAAe;AACrB",sourcesContent:[":root {\n  barRight: 0;\n  bgColor: rebeccapurple;\n  barWidth: 8px;\n  zIndex: 1000;\n}\n\n.reading-position-bar {\n  &__wrapper {\n    display: none;\n    position: fixed;\n    right: var(--barRight);\n    top: 0;\n    width: var(--barWidth);\n    height: 100%;\n    background: #DDD;\n    z-index: 1000;\n\n    &__indicator {\n      background: var(--bgColor);\n      height: 0;\n      border-bottom-left-radius: 8px;\n      border-bottom-right-radius: 8px;\n    }\n\n    &__text {\n      position: absolute;\n      right: 0px;\n      margin-top: -20px;\n      padding: 5px;\n      width: 40px;\n      background: var(--bgColor);\n      color: white;\n      text-align: right;\n      font-size: 12px;\n    }\n  }\n}"],sourceRoot:""}]);const s=i},379:(e,t,n)=>{var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function i(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var s=e[o],c=t.base?s[0]+t.base:s[0],l=n[c]||0,u="".concat(c," ").concat(l);n[c]=l+1;var p=i(u),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==p?(a[p].references++,a[p].updater(d)):a.push({identifier:u,updater:b(d,t),references:1}),r.push(u)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,u=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function d(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var f=null,g=0;function b(e,t){var n,r,o;if(t.singleton){var a=g++;n=f||(f=c(t)),r=p.bind(null,n,a,!1),o=p.bind(null,n,a,!0)}else n=c(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=i(n[r]);a[o].references--}for(var c=s(e,t),l=0;l<n.length;l++){var u=i(n[l]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}n=c}}}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,r;return n=t,r=[{key:"createDoms",value:function(e){var t=document.createElement("div");t.className="reading-position-bar__wrapper",t.style.setProperty("--barWidth","10px"),t.style.setProperty("--barRight","0"),t.style.setProperty("--zIndex","1000");var n=document.createElement("div");n.className="reading-position-bar__wrapper__indicator",n.style.setProperty("--bgColor","black"),t.append(n);var r=document.createElement("div");r.className="reading-position-bar__wrapper__text",r.style.setProperty("--bgColor","black"),t.append(r),e.setAttribute("data-reading-position-bar-wrapper","true"),e.append(t)}},{key:"setBgColor",value:function(e){document.querySelector(".reading-position-bar__wrapper__indicator").style.setProperty("--bgColor",e),document.querySelector(".reading-position-bar__wrapper__text").style.setProperty("--bgColor",e)}},{key:"disableText",value:function(){var e=document.querySelector(".reading-position-bar__wrapper__text");e.parentNode.removeChild(e)}},{key:"setBarWidth",value:function(e){var t=parseInt(e);document.querySelector(".reading-position-bar__wrapper").style.setProperty("--barWidth",t+"px")}},{key:"setBarRight",value:function(e){var t=parseInt(e);document.querySelector(".reading-position-bar__wrapper").style.setProperty("--barRight",t+"px")}},{key:"setZIndex",value:function(e){var t=parseInt(e);document.querySelector(".reading-position-bar__wrapper").style.setProperty("--zIndex",t)}}],null&&e(n.prototype,null),r&&e(n,r),t}();function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n;return t=e,n=[{key:"getReadRate",value:function(e){var t=window.innerHeight,n=(window.pageYOffset,Math.max(e.scrollHeight,e.offsetHeight)),r=100*(window.scrollY+t-e.offsetTop)/n,o=parseInt(r.toString(),10);return o>100&&(o=100),o}},{key:"getBarHeight",value:function(e,t,n){var r=window.innerHeight-t,o=parseInt((r*e/100).toString(),10);return window.innerHeight+window.scrollY>n&&(o-=parseInt(window.innerHeight+window.scrollY-n,10)),o<0&&(o=0),o}},{key:"getElementYPos",value:function(e){var t=e.offsetTop-window.scrollY;return t<0&&(t=0),t}}],null&&r(t.prototype,null),n&&r(t,n),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n;return t=e,n=[{key:"setEvent",value:function(){document.addEventListener("scroll",(function(){var e=document.querySelector("[data-reading-position-bar-wrapper=true]"),t=document.querySelector(".reading-position-bar__wrapper__indicator");if(t&&void 0!==t){var n=o.getElementYPos(e),r=document.querySelector(".reading-position-bar__wrapper");r.style.top=n+"px",r.style.display="block";var a=o.getReadRate(e),i=e.offsetTop+e.getBoundingClientRect().height,s=o.getBarHeight(a,n,i);t.style.height=s+"px";var c=document.querySelector(".reading-position-bar__wrapper__text");c.innerHTML=a+"%",c.style.marginTop=0===s?"-32px":"-20px",r.style.height=100===a?s+"px":"100%"}}))}}],null&&a(t.prototype,null),n&&a(t,n),e}(),s=n(379),c=n.n(s),l=n(263);c()(l.Z,{insert:"head",singleton:!1}),l.Z.locals,HTMLElement.prototype.addReadingPositionBar=function(e){t.createDoms(this),i.setEvent(),"bgColor"in e&&t.setBgColor(e.bgColor),"showText"in e&&!1===e.showText&&t.disableText(),"barWidth"in e&&t.setBarWidth(e.barWidth),"right"in e&&t.setBarRight(e.right),"zIndex"in e&&t.setZIndex(e.zIndex)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,