(()=>{"use strict";var e={814:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},122:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),u=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(u).concat([l]).join("\n")}return[a].join("\n")}},263:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(122),o=n.n(r),a=n(814),i=n.n(a)()(o());i.push([e.id,":root {\n  barRight: 0;\n  bgColor: rebeccapurple;\n  barWidth: 8px;\n  zIndex: 1000;\n  offsetTop: 0;\n}\n\n.reading-position-bar__wrapper {\n  display: none;\n  position: fixed;\n  right: var(--barRight);\n  top: var(--offsetTop);\n  width: var(--barWidth);\n  height: 100%;\n  background: #DDD;\n  z-index: 1000;\n}\n\n.reading-position-bar__wrapper__indicator {\n  background: var(--bgColor);\n  height: 0;\n  border-bottom-left-radius: 8px;\n  border-bottom-right-radius: 8px;\n}\n\n.reading-position-bar__wrapper__text {\n  position: absolute;\n  right: 0px;\n  margin-top: -24px;\n  padding: 5px;\n  width: 40px;\n  background: var(--bgColor);\n  color: white;\n  text-align: right;\n  font-size: 12px;\n}\n","",{version:3,sources:["webpack://src/scss/style.scss"],names:[],mappings:"AAAA;EACE,WAAW;EACX,sBAAsB;EACtB,aAAa;EACb,YAAY;EACZ,YAAY;AACd;;AAGE;EACE,aAAa;EACb,eAAe;EACf,sBAAsB;EACtB,qBAAqB;EACrB,sBAAsB;EACtB,YAAY;EACZ,gBAAgB;EAChB,aAAa;AAAjB;;AAEI;EACE,0BAA0B;EAC1B,SAAS;EACT,8BAA8B;EAC9B,+BAA+B;AACrC;;AAEI;EACE,kBAAkB;EAClB,UAAU;EACV,iBAAiB;EACjB,YAAY;EACZ,WAAW;EACX,0BAA0B;EAC1B,YAAY;EACZ,iBAAiB;EACjB,eAAe;AACrB",sourcesContent:[":root {\n  barRight: 0;\n  bgColor: rebeccapurple;\n  barWidth: 8px;\n  zIndex: 1000;\n  offsetTop: 0;\n}\n\n.reading-position-bar {\n  &__wrapper {\n    display: none;\n    position: fixed;\n    right: var(--barRight);\n    top: var(--offsetTop);\n    width: var(--barWidth);\n    height: 100%;\n    background: #DDD;\n    z-index: 1000;\n\n    &__indicator {\n      background: var(--bgColor);\n      height: 0;\n      border-bottom-left-radius: 8px;\n      border-bottom-right-radius: 8px;\n    }\n\n    &__text {\n      position: absolute;\n      right: 0px;\n      margin-top: -24px;\n      padding: 5px;\n      width: 40px;\n      background: var(--bgColor);\n      color: white;\n      text-align: right;\n      font-size: 12px;\n    }\n  }\n}"],sourceRoot:""}]);const s=i},379:(e,t,n)=>{var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function i(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var s=e[o],c=t.base?s[0]+t.base:s[0],l=n[c]||0,u="".concat(c," ").concat(l);n[c]=l+1;var p=i(u),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==p?(a[p].references++,a[p].updater(d)):a.push({identifier:u,updater:b(d,t),references:1}),r.push(u)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,u=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function d(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var f=null,g=0;function b(e,t){var n,r,o;if(t.singleton){var a=g++;n=f||(f=c(t)),r=p.bind(null,n,a,!1),o=p.bind(null,n,a,!0)}else n=c(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=i(n[r]);a[o].references--}for(var c=s(e,t),l=0;l<n.length;l++){var u=i(n[l]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}n=c}}}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,r;return n=t,r=[{key:"createDoms",value:function(e){var t=document.createElement("div");t.className="reading-position-bar__wrapper",t.style.setProperty("--barWidth","10px"),t.style.setProperty("--barRight","0"),t.style.setProperty("--zIndex","1000"),t.style.setProperty("--offsetTop","0");var n=document.createElement("div");n.className="reading-position-bar__wrapper__indicator",n.style.setProperty("--bgColor","black"),t.append(n);var r=document.createElement("div");r.className="reading-position-bar__wrapper__text",r.style.setProperty("--bgColor","black"),t.append(r),e.setAttribute("data-reading-position-bar-wrapper","true"),e.append(t)}},{key:"setBgColor",value:function(e){document.querySelector(".reading-position-bar__wrapper__indicator").style.setProperty("--bgColor",e),document.querySelector(".reading-position-bar__wrapper__text").style.setProperty("--bgColor",e)}},{key:"disableText",value:function(){var e=document.querySelector(".reading-position-bar__wrapper__text");e.parentNode.removeChild(e)}},{key:"setBarWidth",value:function(e){var t=parseInt(e);document.querySelector(".reading-position-bar__wrapper").style.setProperty("--barWidth",t+"px")}},{key:"setBarRight",value:function(e){var t=parseInt(e);document.querySelector(".reading-position-bar__wrapper").style.setProperty("--barRight",t+"px")}},{key:"setZIndex",value:function(e){var t=parseInt(e);document.querySelector(".reading-position-bar__wrapper").style.setProperty("--zIndex",t)}},{key:"setOffsetTop",value:function(e){var t=document.querySelector(".reading-position-bar__wrapper");t.style.setProperty("--offsetTop",e),t.dataset.offsetTop=e}}],null&&e(n.prototype,null),r&&e(n,r),t}();function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n;return t=e,n=[{key:"getReadRate",value:function(e){var t=window.innerHeight,n=(window.pageYOffset,Math.max(e.scrollHeight,e.offsetHeight)),r=100*(window.scrollY+t-e.offsetTop)/n,o=parseInt(r.toString(),10);return o>100&&(o=100),o}},{key:"getBarHeight",value:function(e,t,n,r){var o=window.innerHeight-t,a=parseInt((o*e/100).toString(),10);return window.innerHeight+window.scrollY>n&&(a-=parseInt(window.innerHeight+window.scrollY-n,10)),a<0&&(a=0),a}},{key:"getElementYPos",value:function(e){var t=e.offsetTop-window.scrollY;return t<0&&(t=0),t}}],null&&r(t.prototype,null),n&&r(t,n),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n;return t=e,n=[{key:"setEvent",value:function(){document.addEventListener("scroll",(function(){e.update()}))}},{key:"update",value:function(){var e=document.querySelector("[data-reading-position-bar-wrapper=true]"),t=document.querySelector(".reading-position-bar__wrapper__indicator");if(t&&void 0!==t){var n=o.getElementYPos(e),r=document.querySelector(".reading-position-bar__wrapper"),a=parseInt(r.dataset.offsetTop,10);n<a&&(n=a),r.style.top=n+"px",r.style.display="block";var i=o.getReadRate(e),s=e.offsetTop+e.getBoundingClientRect().height,c=o.getBarHeight(i,n,s,a);t.style.height=c+"px";var l=document.querySelector(".reading-position-bar__wrapper__text");l.innerHTML=i+"%",l.style.marginTop=0===c?"-34px":"-26px",r.style.height=100===i?c+"px":"100%"}}}],null&&a(t.prototype,null),n&&a(t,n),e}(),s=n(379),c=n.n(s),l=n(263);c()(l.Z,{insert:"head",singleton:!1}),l.Z.locals,HTMLElement.prototype.addReadingPositionBar=function(e){t.createDoms(this),i.setEvent(),"bgColor"in e&&t.setBgColor(e.bgColor),"showText"in e&&!1===e.showText&&t.disableText(),"barWidth"in e&&t.setBarWidth(e.barWidth),"right"in e&&t.setBarRight(e.right),"zIndex"in e&&t.setZIndex(e.zIndex),"offsetTop"in e&&t.setOffsetTop(e.offsetTop),i.update()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vLi9zcmMvZG9tLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnRIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL3N0eWxlLnNjc3M/NzYwMSIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJpZCIsIl9pIiwicHVzaCIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJPYmplY3QiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJtZW1vIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJiaW5kIiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJEb20iLCJlbGVtIiwid3JhcHBlciIsImNsYXNzTmFtZSIsInNldFByb3BlcnR5IiwiaW5kaWNhdG9yIiwiYXBwZW5kIiwidGV4dCIsImNvbG9yIiwid2lkdGgiLCJiYXJXaWR0aCIsInBhcnNlSW50IiwicmlnaHQiLCJiYXJSaWdodCIsInpJbmRleCIsImJhclpJbmRleCIsIm9mZnNldFRvcCIsImRhdGFzZXQiLCJVdGlscyIsIndpbmRvd0hlaWdodCIsImlubmVySGVpZ2h0IiwicGFnZUhlaWdodCIsInBhZ2VZT2Zmc2V0IiwiTWF0aCIsIm1heCIsInNjcm9sbEhlaWdodCIsIm9mZnNldEhlaWdodCIsInJhdGUiLCJzY3JvbGxZIiwiaW50UmF0ZSIsImVsZW1ZUG9zIiwiZWxlbUJvdHRvbVkiLCJlbGVtVmlzaWJsZUhlaWdodCIsImludEhlaWdodCIsInJlbGF0aXZlWSIsIkV2ZW50SGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXJlbnQiLCJlbGVtZW50WVBvcyIsImdldEVsZW1lbnRZUG9zIiwidG9wIiwiZGlzcGxheSIsInJlYWRSYXRlIiwiZ2V0UmVhZFJhdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJoZWlnaHQiLCJiYXJIZWlnaHQiLCJnZXRCYXJIZWlnaHQiLCJpbm5lckhUTUwiLCJtYXJnaW5Ub3AiLCJIVE1MRWxlbWVudCIsImFkZFJlYWRpbmdQb3NpdGlvbkJhciIsImJnQ29sb3IiLCJzaG93VGV4dCJdLCJtYXBwaW5ncyI6ImtDQVFBQSxFQUFPQyxRQUFVLFNBQVVDLEdBQ3pCLElBQUlDLEVBQU8sR0F1RFgsT0FyREFBLEVBQUtDLFNBQVcsV0FDZCxPQUFPQyxLQUFLQyxLQUFJLFNBQVVDLEdBQ3hCLElBQUlDLEVBQVVOLEVBQXVCSyxHQUVyQyxPQUFJQSxFQUFLLEdBQ0EsVUFBVUUsT0FBT0YsRUFBSyxHQUFJLE1BQU1FLE9BQU9ELEVBQVMsS0FHbERBLEtBQ05FLEtBQUssS0FLVlAsRUFBS1EsRUFBSSxTQUFVQyxFQUFTQyxFQUFZQyxHQUNmLGlCQUFaRixJQUVUQSxFQUFVLENBQUMsQ0FBQyxLQUFNQSxFQUFTLE1BRzdCLElBQUlHLEVBQXlCLEdBRTdCLEdBQUlELEVBQ0YsSUFBSyxJQUFJSCxFQUFJLEVBQUdBLEVBQUlOLEtBQUtXLE9BQVFMLElBQUssQ0FFcEMsSUFBSU0sRUFBS1osS0FBS00sR0FBRyxHQUVQLE1BQU5NLElBQ0ZGLEVBQXVCRSxJQUFNLEdBS25DLElBQUssSUFBSUMsRUFBSyxFQUFHQSxFQUFLTixFQUFRSSxPQUFRRSxJQUFNLENBQzFDLElBQUlYLEVBQU8sR0FBR0UsT0FBT0csRUFBUU0sSUFFekJKLEdBQVVDLEVBQXVCUixFQUFLLE1BS3RDTSxJQUNHTixFQUFLLEdB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aW9uLWJhci5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAodHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn07IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCI6cm9vdCB7XFxuICBiYXJSaWdodDogMDtcXG4gIGJnQ29sb3I6IHJlYmVjY2FwdXJwbGU7XFxuICBiYXJXaWR0aDogOHB4O1xcbiAgekluZGV4OiAxMDAwO1xcbiAgb2Zmc2V0VG9wOiAwO1xcbn1cXG5cXG4ucmVhZGluZy1wb3NpdGlvbi1iYXJfX3dyYXBwZXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHJpZ2h0OiB2YXIoLS1iYXJSaWdodCk7XFxuICB0b3A6IHZhcigtLW9mZnNldFRvcCk7XFxuICB3aWR0aDogdmFyKC0tYmFyV2lkdGgpO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYmFja2dyb3VuZDogI0RERDtcXG4gIHotaW5kZXg6IDEwMDA7XFxufVxcblxcbi5yZWFkaW5nLXBvc2l0aW9uLWJhcl9fd3JhcHBlcl9faW5kaWNhdG9yIHtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnQ29sb3IpO1xcbiAgaGVpZ2h0OiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogOHB4O1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDhweDtcXG59XFxuXFxuLnJlYWRpbmctcG9zaXRpb24tYmFyX193cmFwcGVyX190ZXh0IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAwcHg7XFxuICBtYXJnaW4tdG9wOiAtMjRweDtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdDb2xvcik7XFxuICBjb2xvcjogd2hpdGU7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovL3NyYy9zY3NzL3N0eWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxXQUFXO0VBQ1gsc0JBQXNCO0VBQ3RCLGFBQWE7RUFDYixZQUFZO0VBQ1osWUFBWTtBQUNkOztBQUdFO0VBQ0UsYUFBYTtFQUNiLGVBQWU7RUFDZixzQkFBc0I7RUFDdEIscUJBQXFCO0VBQ3JCLHNCQUFzQjtFQUN0QixZQUFZO0VBQ1osZ0JBQWdCO0VBQ2hCLGFBQWE7QUFBakI7O0FBRUk7RUFDRSwwQkFBMEI7RUFDMUIsU0FBUztFQUNULDhCQUE4QjtFQUM5QiwrQkFBK0I7QUFDckM7O0FBRUk7RUFDRSxrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLGlCQUFpQjtFQUNqQixZQUFZO0VBQ1osV0FBVztFQUNYLDBCQUEwQjtFQUMxQixZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLGVBQWU7QUFDckJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcbiAgYmFyUmlnaHQ6IDA7XFxuICBiZ0NvbG9yOiByZWJlY2NhcHVycGxlO1xcbiAgYmFyV2lkdGg6IDhweDtcXG4gIHpJbmRleDogMTAwMDtcXG4gIG9mZnNldFRvcDogMDtcXG59XFxuXFxuLnJlYWRpbmctcG9zaXRpb24tYmFyIHtcXG4gICZfX3dyYXBwZXIge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgIHJpZ2h0OiB2YXIoLS1iYXJSaWdodCk7XFxuICAgIHRvcDogdmFyKC0tb2Zmc2V0VG9wKTtcXG4gICAgd2lkdGg6IHZhcigtLWJhcldpZHRoKTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBiYWNrZ3JvdW5kOiAjREREO1xcbiAgICB6LWluZGV4OiAxMDAwO1xcblxcbiAgICAmX19pbmRpY2F0b3Ige1xcbiAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJnQ29sb3IpO1xcbiAgICAgIGhlaWdodDogMDtcXG4gICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA4cHg7XFxuICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDhweDtcXG4gICAgfVxcblxcbiAgICAmX190ZXh0IHtcXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgcmlnaHQ6IDBweDtcXG4gICAgICBtYXJnaW4tdG9wOiAtMjRweDtcXG4gICAgICBwYWRkaW5nOiA1cHg7XFxuICAgICAgd2lkdGg6IDQwcHg7XFxuICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmdDb2xvcik7XFxuICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgfVxcbiAgfVxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IG1vZHVsZVsnZGVmYXVsdCddIDpcblx0XHQoKSA9PiBtb2R1bGU7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIERvbSB7XG4gICAgc3RhdGljIGNyZWF0ZURvbXMgKGVsZW0pIHtcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gJ3JlYWRpbmctcG9zaXRpb24tYmFyX193cmFwcGVyJ1xuICAgICAgICB3cmFwcGVyLnN0eWxlLnNldFByb3BlcnR5KFwiLS1iYXJXaWR0aFwiLCAnMTBweCcpXG4gICAgICAgIHdyYXBwZXIuc3R5bGUuc2V0UHJvcGVydHkoXCItLWJhclJpZ2h0XCIsICcwJylcbiAgICAgICAgd3JhcHBlci5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tekluZGV4XCIsICcxMDAwJylcbiAgICAgICAgd3JhcHBlci5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tb2Zmc2V0VG9wXCIsICcwJylcblxuICAgICAgICBjb25zdCBpbmRpY2F0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICBpbmRpY2F0b3IuY2xhc3NOYW1lID0gJ3JlYWRpbmctcG9zaXRpb24tYmFyX193cmFwcGVyX19pbmRpY2F0b3InXG4gICAgICAgIGluZGljYXRvci5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tYmdDb2xvclwiLCBcImJsYWNrXCIpO1xuICAgICAgICB3cmFwcGVyLmFwcGVuZChpbmRpY2F0b3IpXG5cbiAgICAgICAgY29uc3QgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIHRleHQuY2xhc3NOYW1lID0gJ3JlYWRpbmctcG9zaXRpb24tYmFyX193cmFwcGVyX190ZXh0J1xuICAgICAgICB0ZXh0LnN0eWxlLnNldFByb3BlcnR5KFwiLS1iZ0NvbG9yXCIsIFwiYmxhY2tcIik7XG4gICAgICAgIHdyYXBwZXIuYXBwZW5kKHRleHQpXG5cbiAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcmVhZGluZy1wb3NpdGlvbi1iYXItd3JhcHBlcicsJ3RydWUnKVxuICAgICAgICBlbGVtLmFwcGVuZCh3cmFwcGVyKVxuICAgIH1cblxuICAgIHN0YXRpYyBzZXRCZ0NvbG9yIChjb2xvcikge1xuICAgICAgICBjb25zdCBpbmRpY2F0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJlYWRpbmctcG9zaXRpb24tYmFyX193cmFwcGVyX19pbmRpY2F0b3JcIilcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLnNldFByb3BlcnR5KFwiLS1iZ0NvbG9yXCIsIGNvbG9yKVxuXG4gICAgICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJlYWRpbmctcG9zaXRpb24tYmFyX193cmFwcGVyX190ZXh0XCIpXG4gICAgICAgIHRleHQuc3R5bGUuc2V0UHJvcGVydHkoXCItLWJnQ29sb3JcIiwgY29sb3IpXG4gICAgfVxuXG4gICAgc3RhdGljIGRpc2FibGVUZXh0ICgpIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucmVhZGluZy1wb3NpdGlvbi1iYXJfX3dyYXBwZXJfX3RleHRcIilcbiAgICAgICAgdGV4dC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRleHQpXG4gICAgfVxuXG4gICAgc3RhdGljIHNldEJhcldpZHRoICh3aWR0aCkge1xuICAgICAgICBjb25zdCBiYXJXaWR0aCA9IHBhcnNlSW50KHdpZHRoKVxuICAgICAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZWFkaW5nLXBvc2l0aW9uLWJhcl9fd3JhcHBlclwiKVxuICAgICAgICB3cmFwcGVyLnN0eWxlLnNldFByb3BlcnR5KFwiLS1iYXJXaWR0aFwiLCBiYXJXaWR0aCArICdweCcpXG4gICAgfVxuXG4gICAgc3RhdGljIHNldEJhclJpZ2h0IChyaWdodCkge1xuICAgICAgICBjb25zdCBiYXJSaWdodCA9IHBhcnNlSW50KHJpZ2h0KVxuICAgICAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZWFkaW5nLXBvc2l0aW9uLWJhcl9fd3JhcHBlclwiKVxuICAgICAgICB3cmFwcGVyLnN0eWxlLnNldFByb3BlcnR5KFwiLS1iYXJSaWdodFwiLCBiYXJSaWdodCArICdweCcpXG4gICAgfVxuXG4gICAgc3RhdGljIHNldFpJbmRleCAoekluZGV4KSB7XG4gICAgICAgIGNvbnN0IGJhclpJbmRleCA9IHBhcnNlSW50KHpJbmRleClcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucmVhZGluZy1wb3NpdGlvbi1iYXJfX3dyYXBwZXJcIilcbiAgICAgICAgd3JhcHBlci5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tekluZGV4XCIsIGJhclpJbmRleClcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0T2Zmc2V0VG9wIChvZmZzZXRUb3ApIHtcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucmVhZGluZy1wb3NpdGlvbi1iYXJfX3dyYXBwZXJcIilcbiAgICAgICAgd3JhcHBlci5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tb2Zmc2V0VG9wXCIsIG9mZnNldFRvcClcbiAgICAgICAgd3JhcHBlci5kYXRhc2V0Lm9mZnNldFRvcCA9IG9mZnNldFRvcFxuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVdGlscyB7XG4gICAgc3RhdGljIGdldFJlYWRSYXRlIChlbGVtKSB7XG4gICAgICAgIGNvbnN0IHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgICBjb25zdCB5T2ZmU2V0ID0gd2luZG93LnBhZ2VZT2Zmc2V0XG5cbiAgICAgICAgY29uc3QgcGFnZUhlaWdodCA9IE1hdGgubWF4KCBlbGVtLnNjcm9sbEhlaWdodCwgZWxlbS5vZmZzZXRIZWlnaHQgKVxuXG4gICAgICAgIGNvbnN0IHJhdGUgPSAod2luZG93LnNjcm9sbFkgKyB3aW5kb3dIZWlnaHQgLSBlbGVtLm9mZnNldFRvcCkgKiAxMDAgLyBwYWdlSGVpZ2h0XG4gICAgICAgIGxldCBpbnRSYXRlID0gcGFyc2VJbnQocmF0ZS50b1N0cmluZygpLCAxMClcbiAgICAgICAgaWYgKGludFJhdGUgPiAxMDApIHtcbiAgICAgICAgICAgIGludFJhdGUgPSAxMDBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnRSYXRlXG4gICAgfVxuXG4gICAgc3RhdGljIGdldEJhckhlaWdodCAocmF0ZSwgZWxlbVlQb3MsIGVsZW1Cb3R0b21ZLCBvZmZzZXRUb3ApIHtcbiAgICAgICAgY29uc3QgZWxlbVZpc2libGVIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSBlbGVtWVBvc1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBlbGVtVmlzaWJsZUhlaWdodCAqIHJhdGUgLyAxMDBcbiAgICAgICAgbGV0IGludEhlaWdodCA9IHBhcnNlSW50KGhlaWdodC50b1N0cmluZygpLCAxMClcbiAgICAgICAgaWYgKHdpbmRvdy5pbm5lckhlaWdodCArIHdpbmRvdy5zY3JvbGxZID4gZWxlbUJvdHRvbVkpIHtcbiAgICAgICAgICAgIGludEhlaWdodCAtPSBwYXJzZUludCh3aW5kb3cuaW5uZXJIZWlnaHQgKyB3aW5kb3cuc2Nyb2xsWSAtIGVsZW1Cb3R0b21ZLDEwKVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRIZWlnaHQgPCAwKSB7XG4gICAgICAgICAgICBpbnRIZWlnaHQgPSAwXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGludEhlaWdodFxuICAgIH1cblxuICAgIHN0YXRpYyBnZXRFbGVtZW50WVBvcyAoZWxlbSkge1xuICAgICAgICBsZXQgcmVsYXRpdmVZID0gZWxlbS5vZmZzZXRUb3AgLSB3aW5kb3cuc2Nyb2xsWVxuICAgICAgICBpZiAocmVsYXRpdmVZIDwgMCkge1xuICAgICAgICAgICAgcmVsYXRpdmVZID0gMFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWxhdGl2ZVlcbiAgICB9XG59IiwiaW1wb3J0IFV0aWxzIGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudEhhbmRsZXIge1xuICAgIHN0YXRpYyBzZXRFdmVudCAoKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgRXZlbnRIYW5kbGVyLnVwZGF0ZSgpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3RhdGljIHVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIltkYXRhLXJlYWRpbmctcG9zaXRpb24tYmFyLXdyYXBwZXI9dHJ1ZV1cIilcblxuICAgICAgICBjb25zdCBpbmRpY2F0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJlYWRpbmctcG9zaXRpb24tYmFyX193cmFwcGVyX19pbmRpY2F0b3JcIilcbiAgICAgICAgaWYoIWluZGljYXRvciB8fCB0eXBlb2YgaW5kaWNhdG9yID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICAvLyDlr77osaFET03jga7kvY3nva7jgpLlj5blvpdcbiAgICAgICAgbGV0IGVsZW1lbnRZUG9zID0gVXRpbHMuZ2V0RWxlbWVudFlQb3MocGFyZW50KVxuICAgICAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZWFkaW5nLXBvc2l0aW9uLWJhcl9fd3JhcHBlclwiKVxuICAgICAgICBjb25zdCBvZmZzZXRUb3AgPSBwYXJzZUludCh3cmFwcGVyLmRhdGFzZXQub2Zmc2V0VG9wLCAxMClcbiAgICAgICAgaWYgKCBlbGVtZW50WVBvcyA8IG9mZnNldFRvcCApIHtcbiAgICAgICAgICAgIGVsZW1lbnRZUG9zID0gb2Zmc2V0VG9wXG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlci5zdHlsZS50b3AgPSBlbGVtZW50WVBvcyArICdweCdcbiAgICAgICAgd3JhcHBlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuXG4gICAgICAgIGNvbnN0IHJlYWRSYXRlID0gVXRpbHMuZ2V0UmVhZFJhdGUocGFyZW50KVxuICAgICAgICBjb25zdCBlbGVtQm90dG9tWSA9IHBhcmVudC5vZmZzZXRUb3AgKyBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0XG4gICAgICAgIGNvbnN0IGJhckhlaWdodCA9IFV0aWxzLmdldEJhckhlaWdodChyZWFkUmF0ZSwgZWxlbWVudFlQb3MsIGVsZW1Cb3R0b21ZLCBvZmZzZXRUb3ApXG4gICAgICAgIGluZGljYXRvci5zdHlsZS5oZWlnaHQgPSBiYXJIZWlnaHQgKyBcInB4XCJcblxuICAgICAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZWFkaW5nLXBvc2l0aW9uLWJhcl9fd3JhcHBlcl9fdGV4dFwiKVxuICAgICAgICB0ZXh0LmlubmVySFRNTCA9IHJlYWRSYXRlICsgXCIlXCJcbiAgICAgICAgaWYgKGJhckhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgdGV4dC5zdHlsZS5tYXJnaW5Ub3AgPSBcIi0zNHB4XCJcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgdGV4dC5zdHlsZS5tYXJnaW5Ub3AgPSBcIi0yNnB4XCJcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVhZFJhdGUgPT09IDEwMCkge1xuICAgICAgICAgICAgd3JhcHBlci5zdHlsZS5oZWlnaHQgPSBiYXJIZWlnaHQgKyBcInB4XCJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCJcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuL3N0eWxlLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgRG9tIGZyb20gJy4vZG9tJztcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9ldmVudEhhbmRsZXInO1xuaW1wb3J0ICcuL3Njc3Mvc3R5bGUuc2Nzcyc7XG5cbkhUTUxFbGVtZW50LnByb3RvdHlwZS5hZGRSZWFkaW5nUG9zaXRpb25CYXIgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgICBEb20uY3JlYXRlRG9tcyh0aGlzKVxuICAgIEV2ZW50SGFuZGxlci5zZXRFdmVudCgpXG5cbiAgICBpZiAoJ2JnQ29sb3InIGluIG9wdGlvbnMpIHtcbiAgICAgICAgRG9tLnNldEJnQ29sb3Iob3B0aW9ucy5iZ0NvbG9yKVxuICAgIH1cbiAgICBpZiAoJ3Nob3dUZXh0JyBpbiBvcHRpb25zICYmIG9wdGlvbnMuc2hvd1RleHQgPT09IGZhbHNlKSB7XG4gICAgICAgIERvbS5kaXNhYmxlVGV4dCgpXG4gICAgfVxuICAgIGlmICgnYmFyV2lkdGgnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgRG9tLnNldEJhcldpZHRoKG9wdGlvbnMuYmFyV2lkdGgpXG4gICAgfVxuICAgIGlmICgncmlnaHQnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgRG9tLnNldEJhclJpZ2h0KG9wdGlvbnMucmlnaHQpXG4gICAgfVxuICAgIGlmICgnekluZGV4JyBpbiBvcHRpb25zKSB7XG4gICAgICAgIERvbS5zZXRaSW5kZXgob3B0aW9ucy56SW5kZXgpXG4gICAgfVxuICAgIGlmICgnb2Zmc2V0VG9wJyBpbiBvcHRpb25zKSB7XG4gICAgICAgIERvbS5zZXRPZmZzZXRUb3Aob3B0aW9ucy5vZmZzZXRUb3ApXG4gICAgfVxuICAgIEV2ZW50SGFuZGxlci51cGRhdGUoKVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=